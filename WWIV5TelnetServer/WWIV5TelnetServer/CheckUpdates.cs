using System;
using System.IO;
using System.Net;
using System.Timers;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Linq;
using System.Text.RegularExpressions;
using System.Linq;

namespace WWIV5TelnetServer
{
    class CheckUpdates
    {
        public System.Timers.Timer updateTimer;
        string CheckUpdateFile = @"WWIV5_Update_Stamp.xml";

        public void UpdateHeartbeat()
        {
            // Create or Update External XML For Last Update Check DateTime
            if (!File.Exists(CheckUpdateFile))
            {
                DateTime DateTimeNow = DateTime.Now;
                XmlWriterSettings wSettings = new XmlWriterSettings();
                wSettings.Indent = true;
                XmlWriter writer = XmlWriter.Create(CheckUpdateFile, wSettings);

                writer.WriteStartDocument();
                writer.WriteComment("This file is generated by WWIV5TelnetServer - DO NOT MODIFY.");
                writer.WriteStartElement("WWIV5UpdateStamp");
                writer.WriteStartElement("LastChecked");
                writer.WriteElementString("DateTime", DateTimeNow.ToString());
                writer.WriteEndElement();
                writer.WriteEndElement();
                writer.WriteEndDocument();
                writer.Flush();
                writer.Close();
            }

            // Do Update Check
            updateTimer = new System.Timers.Timer(1000 * 60 * 60); // Hourly
            //updateTimer = new System.Timers.Timer(1000 * 10); // 10 Seconds for Testing Only
            updateTimer.Elapsed += new ElapsedEventHandler(DoUpdateCheck);
            updateTimer.AutoReset = true;
            updateTimer.Enabled = true;

            if (Properties.Settings.Default.checkUpdates == "On Startup")
            {
                DoUpdateCheck(null, null);
            }
        }

        public void DoUpdateCheck(object source, ElapsedEventArgs e)
        {
            // Get Last Time Update Was Checked DateTime
            XDocument xdoc = XDocument.Load(@"WWIV5_Update_Stamp.xml");
            string lastUpdateCheck = xdoc.Element("WWIV5UpdateStamp").Element("LastChecked").Element("DateTime").Value;

            // DateTime Now
            DateTime DateTimeNow = DateTime.Now;
            //DateTime DateTimeThen = DateTime.ParseExact(lastUpdateCheck, "mm/dd/yyyy HH:mm:ss tt", null);
            DateTime DateTimeThen = DateTime.Parse(lastUpdateCheck, null);

            // Get Differnece In DateTimes
            TimeSpan duration = (DateTimeNow - DateTimeThen);
            TimeSpan interval = new TimeSpan(3, 16, 42, 45, 750);
            double hourCount = duration.TotalHours;
            double dayCount = duration.TotalDays;

            // Get Global Strings for Version Numbers
            string buildVersion;
            buildVersion = MainForm.WWIV_Build;
            string longVersion;
            longVersion = MainForm.WWIV_Version;

            // Declare And Initilize Set Build Number Variables to 0
            string wwivBuild5_1 = "0";

            // Grab User Check Update Preference 
            string UserUpdatePref;
            UserUpdatePref = Properties.Settings.Default.checkUpdates;

            // Fetch Latest Build Number For WWIV 5.1
            WebClient wc = new WebClient();
            string htmlString1 = wc.DownloadString("http://build.wwivbbs.org/jenkins/job/wwiv/lastSuccessfulBuild/label=windows/");
            Match mTitle1 = Regex.Match(htmlString1, "(?:number.*?>)(?<buildNumber1>.*?)(?:<)");
            {
                wwivBuild5_1 = mTitle1.Groups[1].Value;
            }
            string newestVersion;
            newestVersion = wwivBuild5_1;

            int newBuild = Int32.Parse(newestVersion);
            int oldBuild = Int32.Parse(buildVersion);

            // On Startup Check For Update
            if (UserUpdatePref == "On Startup" && newBuild > oldBuild)
            {
                updateTimer.AutoReset = false;
                updateTimer.Enabled = false;
                MessageBox.Show("A Newer Version of WWIV is Available!");
                // TODO Launch WWIV Update For Windows Once Packaged with Distribution.
            }

            // Periodical Update Checking
            if (UserUpdatePref == "Hourly" && newBuild > oldBuild && hourCount >= 1)
            {
                updateTimer.Enabled = false;
                MessageBox.Show("A Newer Version of WWIV is Available!");
                // TODO Launch WWIV Update For Windows Once Packaged with Distribution.
            }
            if (UserUpdatePref == "Daily" && newBuild > oldBuild && hourCount >= 24)
            {
                updateTimer.Enabled = false;
                MessageBox.Show("A Newer Version of WWIV is Available!");
                // TODO Launch WWIV Update For Windows Once Packaged with Distribution.
            }
            if (UserUpdatePref == "Weekly" && newBuild > oldBuild && dayCount >= 7)
            {
                updateTimer.Enabled = false;
                MessageBox.Show("A Newer Version of WWIV is Available!");
                // TODO Launch WWIV Update For Windows Once Packaged with Distribution.
            }
            if (UserUpdatePref == "Monthly" && newBuild > oldBuild && dayCount >= 30)
            {
                updateTimer.Enabled = false;
                MessageBox.Show("A Newer Version of WWIV is Available!");
                // TODO Launch WWIV Update For Windows Once Packaged with Distribution.
            }

            // Update XML File Last Update DateTime
            XmlWriterSettings wSettings = new XmlWriterSettings();
            wSettings.Indent = true;
            XmlWriter writer = XmlWriter.Create(CheckUpdateFile, wSettings);
            writer.WriteStartDocument();
            writer.WriteComment("This file is generated by WWIV5TelnetServer - DO NOT MODIFY.");
            writer.WriteStartElement("WWIV5UpdateStamp");
            writer.WriteStartElement("LastChecked");
            writer.WriteElementString("DateTime", DateTimeNow.ToString());
            writer.WriteEndElement();
            writer.WriteEndElement();
            writer.WriteEndDocument();
            writer.Flush();
            writer.Close();

            // Re-Activate Update Timer
            updateTimer.Enabled = true;
        }
    }
}
